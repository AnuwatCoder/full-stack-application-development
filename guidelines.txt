================================
💡 Workshop Laravel 11 with React  💡
================================

⚡ DAY 1-2
1.Setup Tools
2.What new in Laravel 11
3.Setup Project
4.PostgreSQL/
5.API Controller & Methods
-------------------------------------------------------
🚀1. การเตรียมเครื่องมือและความพร้อม
💻 XAMPP & PHP 8.2.x
https://www.apachefriends.org
---
💻 Node JS 18.x and up
https://nodejs.org
---
node -v
npm -v

💻 Composer
https://getcomposer.org
---

💻 PostgreSQL 15 and up
https://www.postgresql.org
---

💻 VSCode
https://code.visualstudio.com
---


🚀 2.What new in Laravel 11
---
https://laravel.com/docs/11.x

🚀3.Setup Project
---
</> Server Prerequisites to Install Laravel 11

PHP >= 8.2
Ctype PHP Extension
cURL PHP Extension
DOM PHP Extension
Fileinfo PHP Extension
Filter PHP Extension
Hash PHP Extension
Mbstring PHP Extension
OpenSSL PHP Extension
PCRE PHP Extension
PDO PHP Extension
Session PHP Extension
Tokenizer PHP Extension
XML PHP Extension

การติดตั้ง
https://laravel.com/docs/11.x
---
</> ติดตั้งเวอร์ชั่นล่าสุด (11.x)

💻 composer create-project  laravel/laravel  mylaravel11-app 

หมายเหตุ ติดตั้งระบุเลข Version เฉพาะ
💻 composer create-project laravel/laravel:^10.0 mylaravel10-app

</> การรันโปรเจ็กต์
---
💻 php artisan serve
ปกติจะรันอยู่ที่ http://127.0.0.1:8000

หากต้องการ run ที่ port อื่น 
💻php artisan serve  --port=9000

</> Laravel Basic Routing
---

</> Basic Routing
---

Route::get('/', function () {
    return 'Hello World!';
});

Route::get('about', function(){
    return 'My about page';
});

</> Routing with Parameters
---
Route::get('user/{id}', function ($id) {
    return 'User:' . $id;
});

Route::get('posts/{post}/comments/{comment}', function ($postID, $commentID) {
    return 'Post:' . $postID . '<br>Comment:' . $commentID;
});

Route::get('member/{name?}', function ($name = null) {
    return 'Hello' . $name;
});

</> Regular Expression Constraints
---
Route::get('category/{name}', function ($name) {
    return $name;
})->where('name', '[A-Za-z]+');

Route::get('group/{id}', function ($id) {
    return $id;
})->where('id','[0-9]+');

Route::get('product/{id}/{name}', function ($id, $name) {
    return 'Product ID:'.$id.'<br>Product name:'.$name;
})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);

</> Named Routes
---
Route::get('guest/showroom/data/{name?}',function($name=null){
    return'Hello'.$name;
})->name('guestprofile');

Route post,put,delete
---
Route::post('user/profile',function(){
    return'POST';
});

Route::put('user/profile',function(){
    return'PUT';
});

Route::delete('user/profile',function(){
    return'DELETE';
});

</> พื้นฐานการทำงานกับ Controller ใน Laravel 11
---
การสร้าง Controller ใหม่
php artisan make:controller HomeController

</> การเรียกใช้งาน Controller ใน routes (web.php)
---
Method 1:

Route::get(
  'profile’,
  'App\Http\Controllers\HomeController@showprofile’
);

Method 2:

use App\Http\Controllers\HomeController;

Route::get(
  'profile’,
  [HomeController::class,'showprofile’]
);

</> Route Prefixes
---
Route::group(['prefix' => 'admin'], function () {
    Route::get('users', function ()    {
        // Matches The "/admin/users" URL
    });
});

Route::group(['prefix' => 'accounts/{account_id}'], function () {
    Route::get('detail', function ($account_id)    {
        // Matches The accounts/{account_id}/detail URL
    });
});


🚀4.PostgreSQL/MySQL Connect

</> การทำงานกับฐานข้อมูล
---
เชื่อมต่อฐานข้อมูล PostgreSQL
แก้ไขไฟล์ .env
---
# SQLite
# DB_CONNECTION=sqlite

# MySQL
# DB_CONNECTION=mysql
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

# PostgreSQL
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=samplelaraveldb
DB_USERNAME=postgres
DB_PASSWORD=123456

</> คำสั่ง Running Migrations
---
💻 php artisan migrate

</> สรุปคำสั่ง สร้าง migration และ db:seed พร้อมกัน
---
💻 php artisan migrate:fresh --seed

</> การสร้าง API ใน Laravel 11
---
ติดตั้ง api
---
💻 php artisan install:api

🚀5.API Controller & Methods

</> ทดสอบเขียน api ที่ไฟล์ routes/api.php
---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

// Route::get('/user', function (Request $request) {
//     return $request->user();
// })->middleware('auth:sanctum');

// กำหนดตัวแปร $users
$users = [
    [
        'name' => 'User1',
        'email' => 'user1@email.com',
    ],
    [
        'name' => 'User2',
        'email' => 'user1@email.com',
    ]
];

// GET /api/user
Route::get('/user',  function (Request $request) use ($users){
    return $users;
});

// POST /api/user
// Payload: { "name": "User3", "email": "user3@email.com"}
Route::post('/user', function (Request $request)  use ($users){
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Add the new user to the users array
    $users[] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// PUT /api/user/1
// Payload: { "name": "UserEdit", "email": "useredit@email.com"}
Route::put('/user/{id}', function (Request $request, $id) use ($users) {
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Update the user with the given id
    $users[$id] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// DELETE /api/user/1
Route::delete('/user/{id}', function (Request $request, $id) use ($users) {
    // Remove the user with the given id
    unset($users[$id]);

    // Return the name and email
    return $users;
});


-------------------------------------------------------
⚡ DAY 2
1.Create Laravel Project for Rest API
2.Sanctum package settings
3.API Register, Login, Refresh, Logout
4.Deploy Laravel Project to cloud
-------------------------------------------------------
🚀 1.Create Laravel Project for Rest API

Step 1: สร้างโปรเจ็กต์ใหม่ใน Laravel 11
💻 composer create-project  laravel/laravel laravel11-api

Step 2: เปิดเข้า vscode
💻 cd laravel11-api

Step 3: ทดสอบรันโปรเจ็กต์
💻 php artisan serve

Step 4: สร้างฐานข้อมูลใหม่ใน PostgreSQL "laravelapi"
</> CREATE DATABASE laravelapi;

Step 5: แก้ไขไฟล์ .env เพื่อ Connect ฐานข้อมูล PostgreSQL
</>

# PostgreSQL
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=laravelapi
DB_USERNAME=postgres
DB_PASSWORD=123456

Step 6: สร้าง migration resource conrtroller and model
💻 php artisan make:model --migration --controller Product --api

จะได้ไฟล์ app/Http/Controllers/ProductController.php เป็นแบบ API

และได้ไฟล์ database/migrations/2024_05_24_100645_create_products_table.php 

Step 7: กำหนดโครงสร้าง migrations ที่ไฟล์ "xxx_create_users_table.php"

public function up(): void
{
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('fullname');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
 }

Step 8: กำหนดโครงสร้าง migrations ที่ไฟล์ "xxx_create_products_table.php"

public function up()
{
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug');
            $table->string('description')->nullable();
            $table->decimal('price',9, 2); // 2,859,893.50
            $table->string('image')->nullable();
            $table->unsignedBigInteger('user_id')->comment('Created By User');
            $table->foreign('user_id')->references('id')->on('users');
            $table->timestamps();
        });
}


🚀 2.Sanctum package settings

Step 9: ติดตั้ง api routes ใน Laravel 11
💻 php artisan install:api

One new database migration has been published. Would you like to run all pending database migrations? (yes/no) [yes]
ตอบ yes เพื่อทำการ migrate ฐานข้อมูล

จะได้ตารางทั้งหมด 11 ตารางในฐานข้อมูล
cache
cache_locks
failed_jobs
job_batches
jobs
migrations
password_reset_tokens
personal_access_tokens
products
sessions
users

หมายเหตุ หากมีการแก้ไข migration สามารถสั่งอัพรัน migrate ใหม่
💻 php artisan migrate

Step 10: เพิ่ม Laravel\Sanctum\HasApiTokens เข้าไปที่ User model
</> app/Models/User.php

use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'fullname',
        'username',
        'email',
        'email_verified_at',
        'password',
        'tel',
        'avatar',
        'role',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    /**
     * Products Relationship
     */
    public function products()
    {
        return $this->hasMany(Product::class)->orderBy('id', 'desc');
    }
}


🚀 3.API Register, Login, Refresh Token, Logout

Step 11: สร้าง AuthController.php สำหรับไว้ทำ Register และ Login
💻 php artisan make:controller AuthController --model=User

Step 12: สร้าง Method register และ login ใน src\app\Http\Controllers\AuthController.php
</>

<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    // Register User
    public function register(Request $request){

        // Validate field
        $fields = $request->validate([
            'fullname' => 'required|string',
            'email'=> 'required|string|unique:users,email',
            'password'=>'required|string|confirmed'
        ]);

        // Create user
        $user = User::create([
            'fullname' => $fields['fullname'],
            'email' => $fields['email'],
            'password' => bcrypt($fields['password']), 

        ]);

        $response = [
            'status' => true,
            'message' => "User registered successfully",
            'user' => $user,
        ];

        return response($response, 201);
    }

     public function login(Request $request)
    {

        // Validate input fields
        $validatedData = $request->validate([
            'email' => 'required|email',
            'password' => 'required|string'
        ]);

        // Find user by email
        $user = User::where('email', $validatedData['email'])->first();

        // Validate user existence and password
        if (!$user || !Hash::check($validatedData['password'], $user->password)) {
            return response()->json([
                'status' => false,
                'message' => 'Invalid credentials'
            ], 401);
        }

        // Revoke all existing tokens
        $user->tokens()->delete();

        // Create a new token
        $token = $user->createToken($request->userAgent())->plainTextToken;

        // Return successful response with user and token
        return response()->json([
            'status' => true,
            'message' => 'Login successful',
            'user' => $user,
            'token' => $token
        ], 200);
    }

    // Refresh Token
    public function refreshToken(Request $request) {
        $user = $request->user();
        $user->tokens()->delete();
        $token = $user->createToken($request->userAgent(), ["$user->role"])->plainTextToken;
        $response = [
            'status' => true,
            'message' => 'Token refreshed',
            'user' => $user,
            'token' => $token
        ];
        return response($response, 201);
    }

    // Logout User
    public function logout(Request $request){
        auth()->user()->tokens()->delete();
        return [
            'status' => true,
            'message' => 'Logged out'
        ];
    }
}

Step 13: แก้ไขไฟล์ src\routes\api.php เพิ่ม routes
</>

<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;

// Route for register and login
Route::post('register',[AuthController::class, 'register']);
Route::post('login',[AuthController::class, 'login']);

Route::group(['middleware' => 'auth:sanctum'], function(){
    Route::post('logout',[AuthController::class, 'logout']);
});

Step 14: ทดสอบ Register และ Login/Logout API
</>

การ register
---
http://localhost:8000/api/register
Method: POST
PayLoad
{
    "fullname":"John Doe",
    "email":"john@email.com",
    "password":"12345678",
    "password_confirmation":"12345678"
}

ผลลัพธ์ที่ควรได้กลับมา
---
{
  "status": true,
  "message": "User registered successfully",
  "user": {
    "fullname": "John Doe",
    "email": "john@email.com",
    "updated_at": "2024-05-24T11:28:09.000000Z",
    "created_at": "2024-05-24T11:28:09.000000Z",
    "id": 1
  }
}

การ login
---
http://localhost:8000/api/login

{
    "email":"john@email.com",
    "password":"12345678"
}

ผลลัพธ์ที่ควรได้กลับมา
---
{
  "status": true,
  "message": "Login successfully",
  "user": {
    "id": 1,
    "fullname": "John Doe",
    "email": "john@email.com",
    "email_verified_at": null,
    "created_at": "2024-05-24T11:28:09.000000Z",
    "updated_at": "2024-05-24T11:28:09.000000Z"
  },
  "token": "1|PMZLAaTCBgvIBkxVK7y3ZcxLHpqk9rETmQmoWUVle5e2e9c7"
}

Step 14: ทดสอบ Register และ Login/Logout API
</>

-------------------------------------------------------
⚡DAY 3
1.What new in React
2.Setup React Project
3.React Composition API
4.Consuming REST API in React
-------------------------------------------------------